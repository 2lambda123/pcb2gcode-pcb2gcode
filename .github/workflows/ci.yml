name: CI

on:
  pull_request:
  push:
    branches:
      - master
  schedule:
    - cron: '5 4 * * 1'

jobs:
  build-and-test:
    name: ${{ matrix.os }}_${{ matrix.boost }}_${{ matrix.compiler }}_${{ matrix.geos }}
    strategy:
      matrix:
        os: [ubuntu, macos]
        boost: ['1_60', '1_66', '1_75']
        geos: ['3.8.1', 'none']
        compiler: ['g++', 'g++-8', 'clang++']
        exclude:
          - os: macos
            boost: '1_60'
          - os: macos
            boost: '1_66'
          - os: ubuntu
            boost: '1_75'
          - os: macos
            compiler: 'g++-8'
        include:
          - os: ubuntu
            boost: 1_66
            compiler: g++-8
            geos: '3.8.1'
            code_coverage: "--enable-code-coverage"
          - boost: 1_60
            skip_gerberimporter_tests: "SKIP_GERBERIMPORTER_TESTS=1"
    runs-on: ${{ matrix.os }}-latest

    steps:
    - name: Checkout pcb2gcode source
      uses: actions/checkout@v2
    - name: Setup paths and env
      run: |
        mkdir -p $HOME/.local/bin
        mkdir -p $HOME/.local/lib/pkgconfig
        echo "PKG_CONFIG_PATH=$HOME/.local/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=$HOME/.local/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
        echo "PATH=$HOME/.local/bin:$PATH" >> $GITHUB_ENV
    - name: Ubuntu specific setup
      if: matrix.os == 'ubuntu'
      run: |
        sudo apt-get update
        sudo apt-get install libgtkmm-2.4-dev moreutils autopoint libc6-dbg
        echo "NUM_CPUS=$((`nproc --all` * 4))" >> $GITHUB_ENV
    - name: Set clang as default compiler
      if: matrix.compiler == 'clang++'
      run: |
        echo "CC=`which clang`" >> $GITHUB_ENV
        echo "CXX=`which clang++`" >> $GITHUB_ENV
    - name: g++-8 specific setup
      if: matrix.compiler == 'g++-8'
      run: |
        sudo apt-get install g++-8
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 80 --slave /usr/bin/g++ g++ /usr/bin/g++-8 --slave /usr/bin/gcov gcov /usr/bin/gcov-8
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 70 --slave /usr/bin/g++ g++ /usr/bin/g++-7 --slave /usr/bin/gcov gcov /usr/bin/gcov-7
        sudo update-alternatives --set gcc /usr/bin/gcc-8
    - name: Macos specific setup
      if: matrix.os == 'macos'
      run: |
        brew update
        rm /usr/local/bin/2to3
        brew upgrade python@3
        brew reinstall -s libtool
        brew unlink parallel
        brew install boost@1.75 gtkmm moreutils gettext librsvg autoconf automake pkg-config
        brew upgrade wget
        hash -r
        ln -f -s `which glibtoolize` $HOME/.local/bin/libtoolize
        ln -f -s `which glibtool` $HOME/.local/bin/libtool
        hash -r
        echo "BOOST_ROOT=/usr/local/opt/boost@1.75" >> $GITHUB_ENV
        echo "NUM_CPUS=$((`sysctl -n hw.logicalcpu` * 4))" >> $GITHUB_ENV
        echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/opt/libffi/lib/pkgconfig" >> $GITHUB_ENV
        echo "CPPFLAGS_gerbv=-DQUARTZ" >> $GITHUB_ENV
        echo "PATH=/usr/local/opt/gettext/bin:$PATH" >> $GITHUB_ENV
        rm /usr/local/include/boost
    - name: Macos geos
      if: matrix.geos != 'none' && matrix.os == 'macos'
      run:
        brew install geos
    - name: Sanitize cache key
      id: sanitize-key
      run: echo "::set-output name=key::$(echo '${{ matrix.os }}_${{ matrix.boost }}_${{ matrix.compiler }}_${{ matrix.geos }}' | sed 's/+/plus/g')"
    - name: Cache .local
      uses: actions/cache@v2.1.3
      with:
        path: ~/.local
        key: ${{ steps.sanitize-key.outputs.key }}
    - name: Build and install boost
      if: matrix.os == 'ubuntu'
      env:
        BOOST: ${{ matrix.boost }}_0
      run: |
        if [ ! -d "${HOME}/.local/include/boost" ]; then
          pushd ~
          for i in {1..5}; do
            wget -q -T20 -t1 -O "boost_${BOOST}.tar.bz2" "https://github.com/pcb2gcode/pcb2gcode/releases/download/v2.0.0/boost_${BOOST}.tar.bz2" && break;
          done
          tar xjf "boost_${BOOST}.tar.bz2"
          pushd boost_${BOOST}
          ./bootstrap.sh --with-libraries=program_options --prefix=${HOME}/.local
          ./b2 -j ${NUM_CPUS}
          ./b2 install
          popd
          popd
        fi
        echo "BOOST_ROOT=$(echo ${HOME}/.local)" >> $GITHUB_ENV
    - name: Build and install geos
      if: matrix.os == 'ubuntu' && matrix.geos != 'none'
      env:
        GEOS: ${{ matrix.geos }}
      run: |
        if [ ! -d "${HOME}/.local/include/geos" ]; then
          pushd ~
          for i in {1..5}; do
            wget -q -T20 -t1 -O "geos-${GEOS}.tar.bz2" "http://download.osgeo.org/geos/geos-${GEOS}.tar.bz2" && break;
          done
          tar xjf "geos-${GEOS}.tar.bz2"
          pushd geos-${GEOS}
          ./configure --prefix=${HOME}/.local
          make -j ${NUM_CPUS}
          make install
          popd
          popd
        fi
    - name: coverage specific setup
      if: matrix.code_coverage
      run: |
        sudo apt-get install libperlio-gzip-perl libjson-perl
        pushd ~
        git clone --depth=1 https://github.com/linux-test-project/lcov.git
        pushd lcov
        make PREFIX=${HOME}/.local install
        hash -r
        lcov --version
    - name: Display information about build environment
      run: |
        env
        if command -v g++; then g++ --version; fi
        if command -v clang++; then clang++ --version; fi
        if command -v pkg-config; then pkg-config --version; fi
        if command -v m4; then m4 --version; fi
    - name: Install gerbv
      run: |
        if ! gerbv --version; then
          pushd ~
          git clone --depth=1 https://github.com/eyal0/gerbv.git
          pushd gerbv
          sh autogen.sh
          ./configure CPPFLAGS=$CPPFLAGS_gerbv --disable-update-desktop-database --prefix=${HOME}/.local
          make -j ${NUM_CPUS}
          make install
          popd
          popd
        fi
    - name: Install valgrind
      if: matrix.os == 'ubuntu'
      run: |
        if ! valgrind --version; then
          pushd ~
          git clone --depth=1 git://sourceware.org/git/valgrind.git
          pushd valgrind
          sh autogen.sh
          ./configure --prefix=${HOME}/.local
          make -j ${NUM_CPUS}
          make install
          popd
          popd
        fi
    - name: Install parallel
      run: |
        if ! parallel --version; then
          pushd ~
          for i in {1..5}; do
            wget -q -T5 -t1 -O "parallel-latest.tar.bz2" 'https://ftpmirror.gnu.org/parallel/parallel-latest.tar.bz2' && break;
          done
          mkdir parallel
          pushd parallel
          tar xjf "../parallel-latest.tar.bz2"
          pushd parallel-*
          ./configure --prefix=${HOME}/.local
          make
          make install
          popd
          popd
          popd
        fi
    - name: Finalize setup
      run: |
        hash -r
    - name: Autoreconf pcb2gcode
      run: autoreconf -fvi
    - name: Configure pcb2gcode
      run: >-
        ./configure pcb2gcode_CPPFLAGS_EXTRA=-Werror
        --disable-dependency-tracking
        --disable-silent-rules
        --enable-static-boost
        ${{ matrix.code_coverage }}
        || (cat config.log && false)
    - name: Remove debug flags from coverage builds
      if: matrix.code_coverage
      run: sed -i 's/-g /-g0 /g' Makefile
    - name: Make pcb2gcode
      run: make -j ${NUM_CPUS}
    - name: Run examples
      if: '! matrix.code_coverage'
      run: |
        pushd testing/gerbv_example
        ls | parallel -k -j ${NUM_CPUS} --halt soon,fail=1 '
          pushd {};
          echo "Running on {}";
          if [[ -f "no-valgrind" ]]; then
            cat no-valgrind;
          fi;
          if [[ -f "no-valgrind" || "${{ matrix.os }}" != "ubuntu" ]]; then
            time ../../../pcb2gcode || exit;
          else
            time valgrind --error-exitcode=127 --errors-for-leak-kinds=definite --leak-check=full -- ../../../pcb2gcode || exit;
          fi;
          echo "Finished on {}";
          popd'
        popd
    - name: Reset coverage
      if: matrix.code_coverage
      continue-on-error: true
      run: lcov --directory . -z
    - name: Run unit tests
      if: matrix.os == 'macos'
      env:
        VERBOSE: 1
        SKIP_GERBERIMPORTER_TESTS_PNG: 1
      run: ${{ matrix.skip_gerberimporter_tests }} make -j ${NUM_CPUS} check
    - name: Run unit tests with valgrind
      if: matrix.os == 'ubuntu'
      env:
        VERBOSE: 1
        SKIP_GERBERIMPORTER_TESTS_PNG: 1
      run: ${{ matrix.skip_gerberimporter_tests }} make -j ${NUM_CPUS} check-valgrind
    - name: Run integration tests
      if: matrix.boost == '1_66' && matrix.geos == '3.8.1'
      run: |
        sudo apt-get install python3-setuptools
        pip3 install --user wheel colour_runner unittest2 termcolor concurrencytest in_place
        ./integration_tests.py -j ${NUM_CPUS}
    - name: Gather coverage
      if: matrix.code_coverage
      run: |
        lcov --rc lcov_branch_coverage=1 -rc lcov_function_coverage --directory . --capture --no-external --output-file "pcb2gcode-lcov.info"
        lcov --rc lcov_branch_coverage=1 -rc lcov_function_coverage -r "pcb2gcode-lcov.info" '*_tests.cpp' -o "pcb2gcode-lcov.info"
    - name: Export coverage artifact
      if: matrix.code_coverage
      uses: actions/upload-artifact@v1
      with:
        name: lcov-${{ steps.sanitize-key.outputs.key }}
        path: pcb2gcode-lcov.info
    - name: Export build
      uses: actions/upload-artifact@v1
      with:
        name: pcb2gcode-${{ steps.sanitize-key.outputs.key }}
        path: pcb2gcode
    - name: Upload coverage to coveralls
      if: matrix.code_coverage
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: pcb2gcode-lcov.info
        parallel: true
  
  build-and-test-windows:
    name: ${{ matrix.os }}_${{ matrix.boost }}_${{ matrix.compiler }}_${{ matrix.geos }}
    strategy:
      matrix:
        os: ['windows']
        boost: ['1_75']
        geos: ['3.8.1', 'none']
        compiler: ['g++']
        local_install_path: ['/d/a/pcb2gcode/.local']
    runs-on: ${{ matrix.os }}-latest

    defaults:
      run:
        shell: |
          powershell -command "[System.Environment]::SetEnvironmentVariable('GITHUB_SCRIPT', ('{0}' -replace '\\','\\')); [System.Environment]::SetEnvironmentVariable('PKG_CONFIG_PATH_MSYS', $Env:PKG_CONFIG_PATH); [System.Environment]::SetEnvironmentVariable('PATH_MSYS', $Env:Path);"
          msys2 -c 'if [[ -v MSYSTEM ]]; then sed -i 1d $(cygpath $GITHUB_SCRIPT); sed -i \$d $(cygpath $GITHUB_SCRIPT); if [[ -v PKG_CONFIG_PATH_MSYS ]]; then export PKG_CONFIG_PATH=$PKG_CONFIG_PATH_MSYS; fi; if [[ -v PATH_MSYS && ! ( $PATH_MSYS =~ ^D:\\\\a\\\\_temp\\\\msys\\;C:\\\\Users ) ]]; then export PATH=$(echo $PATH_MSYS | sed s/D:\\\\\\\\a\\\\\\\\_temp\\\\\\\\msys\;// | sed s/\;/:/g); fi; fi; source $(cygpath $GITHUB_SCRIPT)'
    steps:
    - name: Checkout pcb2gcode source
      uses: actions/checkout@v2
    - name: Setup msys2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: mingw-w64-x86_64-gtkmm git base-devel bash mingw-w64-x86_64-gcc mingw-w64-x86_64-boost mingw-w64-x86_64-cairo
    - name: Setup paths and env
      run: |
        mkdir -p ${LOCAL_INSTALL_PATH}/bin
        mkdir -p ${LOCAL_INSTALL_PATH}/lib/pkgconfig
        echo "PKG_CONFIG_PATH=${LOCAL_INSTALL_PATH}/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=${LOCAL_INSTALL_PATH}/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
        echo "PATH=${LOCAL_INSTALL_PATH}/bin:$PATH" >> $GITHUB_ENV
        echo "LOCAL_INSTALL_PATH=${LOCAL_INSTALL_PATH}" >> $GITHUB_ENV
      env:
        LOCAL_INSTALL_PATH: ${{ matrix.local_install_path }}
    - name: Windows specific setup
      run: |
        echo "NUM_CPUS=$((`nproc --all` * 4))" >> $GITHUB_ENV
    - name: Sanitize cache key
      id: sanitize-key
      run: |
        echo "::set-output name=key::$(echo '${{ matrix.os }}_${{ matrix.boost }}_${{ matrix.compiler }}_${{ matrix.geos }}' | sed 's/+/plus/g')"
        echo "::set-output name=path::$(cygpath -w ${{ matrix.local_install_path }})"
    - name: Cache local install path
      uses: actions/cache@v2.1.3
      with:
        path: ${{ steps.sanitize-key.outputs.path }}
        key: ${{ steps.sanitize-key.outputs.key }}
    - name: Build and install geos
      if: matrix.geos != 'none'
      env:
        GEOS: ${{ matrix.geos }}
      run: |
        if [ ! -d "${LOCAL_INSTALL_PATH}/include/geos" ]; then
          pushd ~
          for i in {1..5}; do
            wget -q -T20 -t1 -O "geos-${GEOS}.tar.bz2" "http://download.osgeo.org/geos/geos-${GEOS}.tar.bz2" && break;
          done
          tar xjf "geos-${GEOS}.tar.bz2"
          pushd geos-${GEOS}
          ./configure --prefix=${LOCAL_INSTALL_PATH}
          make -j ${NUM_CPUS}
          make install
          popd
          popd
        fi
    - name: Display information about build environment
      continue-on-error: true
      run: |
        env
        if command -v g++; then g++ --version; fi
        if command -v clang++; then clang++ --version; fi
        if command -v pkg-config; then pkg-config --version; fi
        if command -v m4; then m4 --version; fi
    - name: Install gerbv
      run: |
        if ! gerbv --version; then
          pushd ~
          git clone --depth=1 https://github.com/eyal0/gerbv.git
          pushd gerbv
          sh autogen.sh
          ./configure CPPFLAGS=$CPPFLAGS_gerbv --disable-update-desktop-database --prefix=${LOCAL_INSTALL_PATH}
          make -j ${NUM_CPUS}
          make install
          popd
          popd
        fi
    - name: Install parallel
      run: |
        if ! parallel --version; then
          pushd ~
          for i in {1..5}; do
            wget -q -T5 -t1 -O "parallel-latest.tar.bz2" "http://ftpmirror.gnu.org/parallel/parallel-latest.tar.bz2" && break;
          done
          mkdir parallel
          pushd parallel
          tar xjf "../parallel-latest.tar.bz2"
          pushd parallel-*
          ./configure --prefix=${LOCAL_INSTALL_PATH}
          make
          make install
          popd
          popd
          popd
        fi
    - name: Finalize setup
      run: |
        hash -r
    - name: Autoreconf pcb2gcode
      run: autoreconf -fvi
    - name: Configure pcb2gcode
      run: >-
        ./configure pcb2gcode_CPPFLAGS_EXTRA=-Werror
        --disable-dependency-tracking
        --disable-silent-rules
        --enable-static-boost
        ${{ matrix.code_coverage }}
        || (cat config.log && false)
    - name: Make pcb2gcode
      run: make -j ${NUM_CPUS}
    - name: Run examples
      if: '! matrix.code_coverage'
      run: |
        pushd testing/gerbv_example
        ls | parallel -k -j ${NUM_CPUS} --halt soon,fail=1 '
          pushd {};
          echo "Running on {}";
          if [[ -f "no-valgrind" ]]; then
            cat no-valgrind;
          fi;
          time ../../../pcb2gcode || exit;
          echo "Finished on {}";
          popd'
        popd
    - name: Export build
      uses: actions/upload-artifact@v1
      with:
        name: pcb2gcode-${{ steps.sanitize-key.outputs.key }}
        path: .libs/pcb2gcode.exe
  finalize-coverage:
    needs: [build-and-test, build-and-test-windows]
    name: Finalize coverage
    runs-on: ubuntu-latest
    steps:
    - name: Checkout pcb2gcode source
      uses: actions/checkout@v2
      with:
        fetch-depth: 2
    - name: Finalize coverage
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        parallel-finished: true
