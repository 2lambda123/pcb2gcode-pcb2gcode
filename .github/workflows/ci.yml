name: CI

on:
  pull_request:
  push:
    branches:
      - master

jobs:
  build-and-test:
    name: Build and Test
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        boost: [1_60_0, 1_66_0]
        compiler: ['g++', 'g++-8', 'clang++']
        exclude:
          - os: macos-latest
            boost: 1_66_0
          - os: macos-latest
            compiler: 'g++-8'
        include:
          - gerberimporter_tests: true
          - code_coverage: false
          - os: ubuntu-latest
            boost: 1_66_0
            compiler: g++-8
            code_coverage: true
          - boost: 1_66_0
            gerberimporter_tests: false
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout pcb2gcode source
      uses: actions/checkout@v1
      with:
        fetch-depth: 1
    - name: Setup paths and env
      run: |
        mkdir -p $HOME/.local/bin
        mkdir -p $HOME/.local/lib/pkgconfig
        echo "::set-env name=PKG_CONFIG_PATH::$HOME/.local/lib/pkgconfig:$PKG_CONFIG_PATH"
        echo "::set-env name=LD_LIBRARY_PATH::$HOME/.local/lib:$LD_LIBRARY_PATH"
        echo "::set-env name=PATH::$HOME/.local/bin:$PATH"
    - name: Linux specific setup
      if: matrix.os == "ubuntu-latest"
      run: |
        echo "::set-env name=NUM_CPUS::$(sysctl -n hw.logicalcpu)"
        pushd ~
        sudo apt-get install libgtkmm-2.4-dev moreutils autopoint libc6-dbg
        mkdir -p boost
        pushd boost
        for i in {1..5}; do
          wget -T20 -t1 -O "boost_${BOOST}.tar.bz2" "https://github.com/pcb2gcode/pcb2gcode/releases/download/v2.0.0/boost_${BOOST}.tar.bz2" && break;
        done
        tar xjf "boost_${BOOST}.tar.bz2"
        pushd boost_${BOOST}
        ./bootstrap.sh --with-libraries=program_options --prefix=${HOME}/.local
        chronic ./b2 -j ${NUM_CPUS}
        chronic ./b2 install
        popd
        popd
        popd
    - name: Macos specific setup
      if: matrix.os == "macos-latest"
      run: |
        brew update
        brew reinstall -s libtool
        brew install boost@1.60 gtkmm moreutils gettext librsvg
        brew upgrade wget
        hash -r
        ln -f -s `which glibtoolize` $HOME/.local/bin/libtoolize
        ln -f -s `which glibtool` $HOME/.local/bin/libtool
        hash -r
        echo "::set-env name=BOOST_DIR::/usr/local/opt/boost@1.60"
        echo "::set-env name=NUM_CPUS::`nproc --all`"
        echo "::set-env name=PKG_CONFIG_PATH::$PKG_CONFIG_PATH:/usr/local/opt/libffi/lib/pkgconfig"
        echo "::set-env name=CPPFLAGS_gerbv::-DQUARTZ"
        echo "::set-env name=PATH::/usr/local/opt/gettext/bin:$PATH"
    - name: g++-8 specific setup
      if: matrix.compiler == "g++-8"
      run: sudo apt-get install g++-8
    - name: coverage specific setup
      if: matrix.code_coverage
      run: sudo apt-get install lcov gcov automake

    - name: Display information about build environment
      continue-on-error: true
      run: |
        env
        g++ --version
        clang++ --version
    - name: apt-get chronic
      run: |
    - name: Install boost
      run: |
        export BOOST=1_66_0
        pushd ~
        for i in {1..5}; do
          wget -T20 -t1 -O "boost_${BOOST}.tar.bz2" "https://github.com/pcb2gcode/pcb2gcode/releases/download/v2.0.0/boost_${BOOST}.tar.bz2" && break;
        done
        tar xjf "boost_${BOOST}.tar.bz2"
        pushd boost_${BOOST}
        ./bootstrap.sh --with-libraries=program_options --prefix=${HOME}/.local
        ./b2 -j ${NUM_CPUS}
        ./b2 install
        echo "::set-env name=BOOST_ROOT::$(echo ${HOME}/.local)"
        popd
        popd
    - name: Install gerbv
      run: |
        sudo apt-get install autopoint
        sudo apt-get install libgtkmm-2.4-dev
        pushd ~
        git clone https://github.com/eyal0/gerbv.git
        pushd gerbv
        sh autogen.sh
        ./configure CPPFLAGS=$CPPFLAGS_gerbv --disable-update-desktop-database --prefix=${HOME}/.local
        make -j ${NUM_CPUS}
        make install
        popd
        popd
    - name: Pip install coverage libraries
      run: |
        pip install --user cpp-coveralls colour_runner unittest2 termcolor concurrencytest in_place
    - name: Install valgrind
      run: |
        pushd ~
        git clone git://sourceware.org/git/valgrind.git
        pushd valgrind
        sh autogen.sh
        ./configure --prefix=${HOME}/.local
        make -j 2
        make install
        popd
        popd
    - name: Install parallel
      run: |
        pushd ~
        for i in {1..5}; do
          wget -T5 -t1 -O "parallel-latest.tar.bz2" "http://ftpmirror.gnu.org/parallel/parallel-latest.tar.bz2" && break;
        done
        mkdir parallel
        pushd parallel
        tar xjf "../parallel-latest.tar.bz2"
        pushd parallel-*
        ./configure --prefix=${HOME}/.local
        make
        make install
        popd
        popd
        popd
    - name: Finalize setup
      run: |
        hash -r
    - name: pcb2gcode autoreconf
      run: autoreconf -fvi
    - name: pcb2gcode configure
      run: >-
        ./configure pcb2gcode_CPPFLAGS_EXTRA=-Werror
        --disable-dependency-tracking
        --disable-silent-rules
        --enable-static-boost
        || (cat config.log && false)
    - name: pcb2gcode make
      run: make -j ${NUM_CPUS}
